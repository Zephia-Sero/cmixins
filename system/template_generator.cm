#include <stdbool.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

int main(int argc, char **argv)
{
	if (argc < 2)
		return 1;
	printf("#include <stdio.h>\n");
	printf("#include <stdlib.h>\n");
	printf("#include <string.h>\n");
	printf("#include \"identptrconv.h\"\n\n");
	printf("static char const *const template = @" "embed" "(\"%s\");\n\n", argv[1]);
	unsigned int minArgs = argc - 2;
	unsigned int maxArgs = argc - 2;
	printf("typedef struct Args {\n");
	for (int i = 2; i < argc; ++i) {
		bool isOptional = false;
		printf("\tchar *");
		for (int j = 0; j < strlen(argv[i]); ++j) {
			if (argv[i][j] == '?') {
				if (minArgs == argc - 2)
					minArgs = i - 2;
				isOptional = true;
				break;
			}
			printf("%c", argv[i][j]);
		}
		printf(";\n");
	}
	printf("} Args;\n\n");
	printf("size_t min(size_t a, size_t b) {\n");
	printf("\tif (a < b) return a;\n");
	printf("\treturn b;\n");
	printf("}\n\n");
	unsigned int numOptionalArgs = maxArgs - minArgs;
	printf("int main(int argc, char **argv)\n");
	printf("{\n");
	printf("\tif (argc < %u+1)\n", minArgs); // +1 to account for argv[0]
	printf("\t\treturn 1;\n");
	printf("\tif (argc > %u+1)\n", maxArgs);
	printf("\t\treturn 1;\n");
	printf("\n");
	printf("\tArgs args;\n");
	for (int i = 0; i < minArgs; ++i)
		printf("\targs.%s = strdup(argv[%u]);\n", argv[i + 2], i + 1);
	for (int i = minArgs; i < maxArgs; ++i) {
		printf("\tif (argc >= %u+1) {\n", i+1);
		char *dup = strdup(argv[i+2]);
		char *alt = dup;
		for (int j = 0; j < strlen(dup); ++j) {
			if (dup[j] == '?') {
				dup[j] = '\0';
				alt = &dup[j+1];
				break;
			}
		}
		char fstring[4096];
		size_t pos = 0;
		int argsNeeded = 0;
		bool isArgRequired[256] = {0};
		for (int j = 0; j < strlen(alt); ++j) {
			bool argIsVar = false;
			for (int argi = 0; argi < maxArgs; ++argi) {
				char *argname = strdup(argv[argi + 2]);
				for (int j = 0; j < strlen(argname); ++j) {
					if (argname[j] == '?') {
						argname[j] = '\0';
						break;
					}
				}
				if (strncmp(&alt[j], argname, strlen(argname)) == 0) {
					pos += snprintf(&fstring[pos], 4095-pos, "%%%d$s", 1 + argsNeeded++);
					isArgRequired[argi] = true;
					j += strlen(argname) - 1;
					argIsVar = true;
					break;
				}
			}
			if (!argIsVar)
				pos += snprintf(&fstring[pos], 4095-pos, "%c", alt[j]);
		}
		printf("\t\targs.%s = strdup(argv[%u]);\n", dup, i+1);
		printf("\t} else {\n");
		printf("\t\tchar substitute[4096];\n");
		printf("\t\tsnprintf(substitute, 4096, \"%s\"", fstring);
		for (int j = 0; j < i; ++j) {
			if (!isArgRequired[j])
				continue;
			char *argname = strdup(argv[j + 2]);
			for (int j = 0; j < strlen(argname); ++j) {
				if (argname[j] == '?') {
					argname[j] = '\0';
					break;
				}
			}
			printf(", strdup(identptrconv(args.%s))", argname);
			free(argname);
		}
		printf(");\n");
		printf("\t\targs.%s = strdup(substitute);\n", dup);
		printf("\t}\n");
		free(dup);
	}

	printf("\tsize_t maxCapacity = strlen(template) * 16;\n");
	printf("\tsize_t pos = 0;\n");
	printf("\tchar *output = malloc(maxCapacity);\n");
	printf("\tfor (size_t i = 0; i < strlen(template); ++i) {\n");
	for (int argi = 0; argi < maxArgs; ++argi) {
		char *argname = strdup(argv[argi + 2]);
		for (int j = 0; j < strlen(argname); ++j) {
			if (argname[j] == '?') {
				argname[j] = '\0';
				break;
			}
		}
		printf("\t\tif (strlen(template) - i - 1 <= 0) break;\n");
		printf("\t\tif (strncmp(&template[i], \"%s\", min(strlen(\"%s\"), strlen(template) - i - 1)) == 0) {\n", argname, argname);
		printf("\t\t\tpos += (snprintf(&output[pos], maxCapacity - pos - 1, \"%%s\", args.%s));\n", argname);
		printf("\t\t\ti += strlen(\"%s\") - 1;\n", argname);
		printf("\t\t\tcontinue;\n");
		printf("\t\t}\n");
		free(argname);
	}
	printf("\t\tpos += snprintf(&output[pos], maxCapacity - pos - 1, \"%%c\", template[i]);\n");
	printf("\t}\n\n");

	printf("\tprintf(\"%%s\\n\", output);\n");
	printf("\tfree(output);\n\n");

	for (int i = 2; i < argc; ++i) {
		char *argname = strdup(argv[i]);
		for (int j = 0; j < strlen(argname); ++j) {
			if (argname[j] == '?') {
				argname[j] = '\0';
				break;
			}
		}
		printf("\tfree(args.%s);\n", argname);
		free(argname);
	}
	printf("}\n");
}

/*
int main(int argc, char **argv)
{
	if (argc < %u)
		return 1;
	if (argc > %u)
		return 1;
	
}*/
