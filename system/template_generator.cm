#include <stdbool.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

size_t min(size_t a, size_t b)
{
	if (a < b) return a;
	return b;
}

int main(int argc, char **argv)
{
	if (argc < 2)
		return 1;

	printf("#include <stdio.h>\n");
	printf("#include <stdlib.h>\n");
	printf("#include <string.h>\n");
	printf("#include \"identptrconv.h\"\n\n");
	printf("static char const *const template = @" "embed" "(\"%s\");\n\n", argv[1]);

	unsigned int minArgs = argc - 2;
	unsigned int maxArgs = argc - 2;

	char **argNames = malloc(sizeof(char*) * maxArgs);
	char **argTemplates = malloc(sizeof(char*) * maxArgs);

	if (!argNames)
		return 1;
	if (!argTemplates)
		return 1;

	for (int i = 0; i < maxArgs; ++i) {
		bool isOptional = false;
		argNames[i] = strdup(argv[i + 2]);
		for (int j = 0; j < strlen(argv[i + 2]); ++j) {
			if (argv[i + 2][j] == '?') {
				if (minArgs == maxArgs)
					minArgs = i;
				isOptional = true;
				argNames[i][j] = '\0';
				argTemplates[i] = &argNames[i][j + 1];
				break;
			}
		}
	}

	printf("typedef struct Args {\n");
	for (size_t i = 0; i < maxArgs; ++i)
		printf("\tchar *%s;\n", argNames[i]);
	printf("} Args;\n\n");

	printf("size_t min(size_t a, size_t b) {\n");
	printf("\tif (a < b) return a;\n");
	printf("\treturn b;\n");
	printf("}\n\n");

	printf("int main(int argc, char **argv)\n");
	printf("{\n");
	printf("\tif (argc < %u+1)\n", minArgs); // +1 to account for argv[0]
	printf("\t\treturn 1;\n");
	printf("\tif (argc > %u+1)\n", maxArgs);
	printf("\t\treturn 1;\n");
	printf("\n");

	printf("\tArgs args;\n");
	for (int i = 0; i < minArgs; ++i)
		printf("\targs.%s = strdup(argv[%u]);\n", argv[i + 2], i + 1);
	for (int i = minArgs; i < maxArgs; ++i) {
		// if the arg exists, just set the value to it; strdup to free easier later
		printf("\tif (argc >= %u+1) {\n", i+1);
		printf("\t\targs.%s = strdup(argv[%u]);\n", argNames[i], i+1);
		// otherwise, fill out the name from the other parameters
		// ex: if the args are (KEY, VALUE, NAME?KVP_KEY_VALUE)
		// and you pass ("String", "int"), then
		// the default name should be KVP_String_int
		printf("\t} else {\n");
		char fstring[4096];
		size_t pos = 0;
		int argsNeeded = 0;
		bool isArgRequired[256] = {0};
		for (int j = 0; j < strlen(argTemplates[i]); ++j) {
			bool argIsVar = false;
			// no recursion, so <i
			for (int argi = 0; argi < i; ++argi) {
				// check if the arg names match
				if (strncmp(&argTemplates[i][j], argNames[argi], min(strlen(argTemplates[i]) - j - 1, strlen(argNames[argi]))) == 0) {
					// put a %n$s into the format string and increment the number of args we require
					// 1+ since %n$s is 1-indexed
					pos += snprintf(&fstring[pos], 4095-pos, "%%%d$s", 1 + argsNeeded++);
					isArgRequired[argi] = true;
					// skip the rest of the arg since it doesn't need to be processed
					// -1 since the next loop will ++j
					j += strlen(argNames[argi]) - 1;
					argIsVar = true;
					break;
				}
			}
			// if we couldn't find an existing argument with a matching name,
			// just add the character
			if (!argIsVar)
				pos += snprintf(&fstring[pos], 4095-pos, "%c", argTemplates[i][j]);
		}
		// get fields
		for (int j = 0; j < i; ++j) {
			if (!isArgRequired[j])
				continue;
			printf("\t\tchar *ident%s = strdup(identptrconv(args.%s));\n", argNames[j], argNames[j]);
		}

		// snprintf to fill in fields
		printf("\t\tchar substitute[4096];\n");
		printf("\t\tsnprintf(substitute, 4096, \"%s\"", fstring);
		for (int j = 0; j < i; ++j) {
			if (!isArgRequired[j])
				continue;
			printf(", ident%s", argNames[j]);
		}
		printf(");\n");
		printf("\t\targs.%s = strdup(substitute);\n", argNames[i]);
		// free identptrconv'd names
		for (int j = 0; j < i; ++j) {
			if (!isArgRequired[j])
				continue;
			printf("\t\tfree(ident%s);\n", argNames[j]);
		}
		printf("\t}\n");
	}

	printf("\n");

	// now that argparsing is done, time to actually fill out the template
	printf("\tsize_t maxCapacity = strlen(template) * 16;\n");
	printf("\tsize_t pos = 0;\n");
	printf("\tchar *output = malloc(maxCapacity);\n");
	printf("\tfor (size_t i = 0; i < strlen(template); ++i) {\n");
	// if we're past the end of the template, break (this was causing issues like a letter from one of the inputs at the end)
	// so just breaking out fixed it?
	printf("\t\tif (strlen(template) - i - 1 <= 0) break;\n");
	for (int argi = 0; argi < maxArgs; ++argi) {
		char *arg = argNames[argi];
		// check if template contains arg name at current i position; min so that we don't go over the bounds of both the
		// template and the arg name
		if (argi > 0)
			printf(" else ");
		else
			printf("\t\t");
		printf("if (strncmp(&template[i], \"%s\", min(strlen(\"%s\"), strlen(template) - i - 1)) == 0) {\n", arg, arg);
		// increment output position by amount of characters printed when we fill in the variable
		printf("\t\t\tpos += (snprintf(&output[pos], maxCapacity - pos - 1, \"%%s\", args.%s));\n", arg);
		// skip the rest of the arg since it doesn't need to be processed
		// -1 since the next loop will ++i
		printf("\t\t\ti += strlen(\"%s\") - 1;\n", arg);
		printf("\t\t}");
	}
	// if none of the above matched (they each have continue, so none of them will get here)
	// then just print the character and continue
	printf(" else {\n");
	printf("\t\t\tpos += snprintf(&output[pos], maxCapacity - pos - 1, \"%%c\", template[i]);\n");
	printf("\t\t}\n");
	printf("\t}\n\n");

	// finally, print the output and free memory!
	printf("\tprintf(\"%%s\\n\", output);\n");
	printf("\tfree(output);\n\n");

	for (int i = 0; i < maxArgs; ++i) {
		printf("\tfree(args.%s);\n", argNames[i]);
		free(argNames[i]);
		// don't do this! argTemplates is part of the same memory as argNames
		// free(argTemplates[i]);
	}
	free(argNames);
	// the list is malloced separately, however, so this is needed
	free(argTemplates);
	printf("}\n");
}
