#ifndef STRING_CM
#define STRING_CM

#include <stdlib.h>
#include <err.h>
#include <string.h>
#include <ctype.h>

@mixin("../vector.cm", "char", "String")

void String_upperify(String *this);
void String_lowerify(String *this);
String String_upper(String this);
String String_lower(String this);
String String_from_cstr(char *cstr);
// Not thread safe.
static char *String_to_cstr(String this);
bool String_starts_with_cstr(String this, char const *find);
bool String_ends_with_cstr(String this, char const *find);
bool String_equals_cstr(String this, char const *other);
void String_push_cstr(String *this, char const *add);
String String_load_file(String path);

#ifdef String_impl
void String_upperify(String *this)
{
	for (size_t i = 0; i < this->length; ++i) {
		char c = this->list[i];
		if (islower(c))
			this->list[i] -= ('a' - 'A');
	}
}

void String_lowerify(String *this)
{
	for (size_t i = 0; i < this->length; ++i) {
		char c = this->list[i];
		if (isupper(c))
			this->list[i] += ('a' - 'A');
	}
}

String String_upper(String this)
{
	String ret = String_copy(this);
	String_upperify(&ret);
	return ret;
}

String String_lower(String this)
{
	String ret = String_copy(this);
	String_lowerify(&ret);
	return ret;
}

String String_from_cstr(char *cstr)
{
	String ret = String_new(strlen(cstr));
	ret.length = ret.capacity;
	for (size_t i = 0; i < ret.length; ++i)
		ret.list[i] = cstr[i];
	return ret;
}

// Not thread safe.
static char *String_to_cstr(String this)
{
	static char cstr[65536];
	size_t i = 0;
	for (; i < 65535; ++i) {
		if (i >= this.length)
			break;
		cstr[i] = this.list[i];
	}
	cstr[i] = '\0';
	return cstr;
}

bool String_starts_with_cstr(String this, char const *find)
{
	size_t length = strlen(find);
	if (length > this.length)
		return false;
	for (size_t i = 0; i < length; ++i)
		if (this.list[i] != find[i])
			return false;
	return true;
}
bool String_ends_with_cstr(String this, char const *find)
{
	size_t length = strlen(find);
	if (length > this.length)
		return false;
	for (size_t i = this.length; i >= this.length - length; --i)
		if (this.list[i] != find[i - (this.length - length)])
			return false;
	return true;
}
bool String_equals_cstr(String this, char const *other)
{
	if (strlen(other) != this.length)
		return false;
	for (size_t i = 0; i < this.length; ++i)
		if (this.list[i] != other[i])
			return false;
	return true;
}
void String_push_cstr(String *this, char const *add)
{
	size_t len = strlen(add);
	String_resize_to_fit(this, this->length + len);
	for (size_t i = 0; i < len; ++i)
		this->list[this->length++] = add[i];
}

String String_load_file(String path)
{
	char *pathcstr = String_to_cstr(path);
	FILE *f = fopen(pathcstr, "r");
	if (!f)
		err(1, "Failed to open %s for reading", pathcstr);
	fseek(f, 0, SEEK_END);
	size_t len = ftell(f);
	fseek(f, 0, SEEK_SET);
	String ret;
	ret.length = len;
	ret.capacity = len;
	ret.list = malloc(sizeof(char) * len);
	if (!ret.list)
		err(1, "Failed to allocate %lu bytes to read file %s", len, pathcstr);
	if (fread(ret.list, 1, len, f) != len)
		err(1, "Failed to read all %lu bytes from %s", len, pathcstr);
	fclose(f);
	return ret;
}
#endif

#endif
