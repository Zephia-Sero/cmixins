#ifndef NAME_H
#define NAME_H
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>

typedef struct KVPNAME { uint64_t hash; KEY key; VALUE value; } KVPNAME;
typedef struct NAME { size_t length, capacity; KVPNAME *list; } NAME;
NAME NAME_new(size_t initialCapacity);
void NAME_resize_to_fit(NAME *this, size_t length);
KVPNAME *NAME_get_kvp_pro(NAME this, KEY key, uint64_t *hash, size_t *index);
KVPNAME *NAME_get_kvp(NAME this, KEY key);
VALUE NAME_get_value(NAME this, KEY key);
bool NAME_has_key(NAME this, KEY key);
void NAME_set(NAME *this, KEY key, VALUE value);
KVPNAME NAME_take(NAME *this, KEY key);
void NAME_remove(NAME *this, KEY key);
void NAME_free(NAME this);

#endif

#ifdef NAME_impl
NAME NAME_new(size_t initialCapacity)
{
	NAME this;
	this.length = 0;
	this.capacity = initialCapacity;
	this.list = malloc(sizeof(KVPNAME) * this.capacity);
	if (!this.list)
		err(1, "Failed to allocate NAME when constructing");
	return this;
}
void NAME_resize_to_fit(NAME *this, size_t length)
{
	// already the right size
	if (length <= this->capacity)
		return;
	if (this->capacity == 0)
		this->capacity = 1;
	while (this->capacity < length)
		this->capacity *= 2;
	KVPNAME *newList = realloc(this->list, this->capacity * sizeof(KVPNAME));
	if (!newList)
		err(1, "Failed to reallocate NAME when resizing to fit %lu elements (new capacity %lu)", length, this->capacity);
	this->list = newList;
}
KVPNAME *NAME_get_kvp_pro(NAME this, KEY key, uint64_t *hash, size_t *index)
{
	uint64_t _hash = FUNC(key);
	if (hash)
		*hash = _hash;
	for (size_t i = 0; i < this.length; ++i) {
		if (this.list[i].hash == _hash) {
			if (EQFUNC(this.list[i].key, key)) {
				if (index)
					*index = i;
				return &this.list[i];
			}
		}
	}
	return NULL;
}
KVPNAME *NAME_get_kvp(NAME this, KEY key)
{
	return NAME_get_kvp_pro(this, key, NULL, NULL);
}
VALUE NAME_get_value(NAME this, KEY key)
{
	return NAME_get_kvp(this, key)->value;
}
bool NAME_has_key(NAME this, KEY key)
{
	return NAME_get_kvp(this, key) != NULL;
}
void NAME_set(NAME *this, KEY key, VALUE value)
{
	uint64_t hash;
	KVPNAME *kvp = NAME_get_kvp_pro(*this, key, &hash, NULL);
	if (kvp) {
		kvp->value = value;
	} else {
		NAME_resize_to_fit(this, this->length + 1);
		this->list[this->length++] = (KVPNAME) {
			.hash = hash,
			.key = key,
			.value = value
		};
	}
}
KVPNAME NAME_take(NAME *this, KEY key)
{
	size_t index;
	KVPNAME *kvp = NAME_get_kvp_pro(*this, key, NULL, &index);
	if (!kvp)
		errx(1, "Attempted to remove nonexistent key from NAME");

	KVPNAME ret = *kvp;
	// shift over last elements
	memmove(&this->list[index], &this->list[index+1], (this->length - index - 1) * sizeof(KVPNAME));
	--this->length;
	return ret;
}
void NAME_remove(NAME *this, KEY key)
{
	size_t index;
	KVPNAME *kvp = NAME_get_kvp_pro(*this, key, NULL, &index);
	if (!kvp)
		return;

	// shift over last elements
	memmove(&this->list[index], &this->list[index+1], (this->length - index - 1) * sizeof(KVPNAME));
	--this->length;
}
void NAME_free(NAME this)
{
	free(this.list);
}
#endif
