#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <assert.h>
#include <unistd.h>

#define INLINE static inline

#define ALIGN(n) __attribute__((aligned(n)))
#define PACKED __attribute__((packed))
#define DEPRECATED __attribute__((deprecated))

#define IGNORE(x) (void)x

typedef void      u0;

typedef uint8_t   u8;
typedef uint16_t u16;
typedef uint32_t u32;
typedef uint64_t u64;
typedef size_t    us;

typedef int8_t   i8;
typedef int16_t i16;
typedef int32_t i32;
typedef int64_t i64;
typedef ssize_t  is;

typedef float  f32;
typedef double f64;

@includesys("basics.cm");

@includesys("string.cm");

// Code modified from nothings/stb/stb_image_write.h
static u32 crc32(void *buffer, size_t len)
{
	static u32 crc_table[256] =
	{
		0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,
		0x0eDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91,
		0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE, 0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,
		0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5,
		0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,
		0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,
		0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,
		0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,
		0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,
		0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,
		0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457,
		0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,
		0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB,
		0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,
		0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,
		0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD,
		0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683,
		0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8, 0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,
		0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7,
		0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,
		0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,
		0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79,
		0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236, 0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F,
		0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,
		0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,
		0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21,
		0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,
		0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,
		0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB,
		0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,
		0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF,
		0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D
	};

	u32 crc = ~0u;
	unsigned char *_buffer = (unsigned char *) buffer;
	for (size_t i = 0; i < len; ++i)
		crc = (crc >> 8) ^ crc_table[_buffer[i] ^ (crc & 0xff)];
	return ~crc;
}

static u32 String_crc32(String this)
{
	return crc32(this.list, this.length);
}

@mixinsys("hashmap.cm", "String", "String", "String_crc32", "HashMap_String_String");

@mixinsys("vector.cm", "String");
@mixinsys("vector.cm", "int");
@mixinsys("vector.cm", "bool");

Vector_int passCount;
unsigned int passLimit = 10;
Vector_bool hasMixins;
HashMap_String_String sourceCache;
Vector_String alreadyIncluded;
HashMap_String_String binaryCache;

String String_load_file(String path)
{
	char *pathcstr = String_to_cstr(path);
	FILE *f = fopen(pathcstr, "r");
	if (!f)
		err(1, "Failed to open %s for reading", pathcstr);
	fseek(f, 0, SEEK_END);
	size_t len = ftell(f);
	fseek(f, 0, SEEK_SET);
	String ret;
	ret.length = len;
	ret.capacity = len;
	ret.list = malloc(sizeof(char) * len);
	if (!ret.list)
		err(1, "Failed to allocate %lu bytes to read file %s", len, pathcstr);
	if (fread(ret.list, 1, len, f) != len)
		err(1, "Failed to read all %lu bytes from %s", len, pathcstr);
	fclose(f);
	return ret;
}

String entry(String path, bool isInclude);

static bool valid_func(String line)
{
	static char const *const funcNames[] = {
		"@""mixinsys", "@""mixin","@""includesys", "@""include",
		"@""setting",
		"@""embed", "@""length"
	};
	static char const *const varNames[] = {
	};
	for (size_t i = 0; i < sizeof(funcNames) / sizeof(funcNames[0]); ++i) {
		if (String_starts_with_cstr(line, funcNames[i])) {
			if (strlen(funcNames[i]) >= line.length)
				errx(1, "Expected ( after macro functfffion name %s.", String_to_cstr(line));
			if (line.list[strlen(funcNames[i])] != '(')
				errx(1, "Expected ( after macro function name %s.", String_to_cstr(line));
			return true;
		}
	}
	for (size_t i = 0; i < sizeof(varNames) / sizeof(varNames[0]); ++i) {
		if (String_starts_with_cstr(line, varNames[i])) {
			if (strlen(varNames[i]) >= line.length)
				return true;
			if (line.list[strlen(varNames[i])] == '(')
				errx(1, "Macro variable cannot be called.");
			return true;
		}
	}
	return false;
}

Vector_String get_call(String line, String *remainder)
{
	ssize_t lparenPos = String_index_of(line, '(');
	ssize_t end = String_index_of(line, ')');
	if (end == -1)
		errx(1, "Expected closing ) for macro call");
	String argsStr;
	// just an empty () call
	if (lparenPos + 1 >= end)
		argsStr = String_new(1);
	else
		argsStr = String_copy_slice(line, lparenPos + 1, end);
	String funcName = String_copy_slice(line, 0, lparenPos);
	if (end < line.length) {
		*remainder = String_copy_slice(line, end+1, line.length);
	} else {
		*remainder = String_from_cstr("\n");
	}
	Vector_String ret = Vector_String_new(String_count(argsStr, ',') + 2);
	Vector_String_push(&ret, funcName);
	while (argsStr.length > 0) {
		ssize_t commaPos = String_index_of(argsStr, ',');
		if (commaPos == -1) {
			String_stripify(&argsStr, ' ');
			String_stripify(&argsStr, '\t');
			String_stripify(&argsStr, '\n');
			Vector_String_push(&ret, argsStr);
			break;
		}
		String arg = String_remove_slice(&argsStr, 0, commaPos + 1);
		arg.length -= 1; // delete the comma
		String_stripify(&arg, ' ');
		String_stripify(&arg, '\t');
		String_stripify(&arg, '\n');
		Vector_String_push(&ret, arg);
	}
	return ret;
}

String make_binary(String sourcePath)
{
	HKVPair_String_String *kvp = HashMap_String_String_get_kvp(binaryCache, sourcePath);
	if (kvp) {
		String_free(sourcePath);
		return kvp->value;
	}
	String source = String_copy(entry(sourcePath, false));
	FILE *progStdout = popen("mktemp -t cmixins.cachedBinary.XXXXXXXX", "r");
	if (!progStdout)
		err(1, "Failed to create mktemp process");
	char tmpFilePath[1024];
	fread(tmpFilePath, 1, 1024, progStdout);
	int status = pclose(progStdout);
	if (status != 0)
		err(1, "mktemp failed with exit code %u", status);
	for (size_t i = 0; i < 1024; ++i) {
		if (tmpFilePath[i] == '\n') {
			tmpFilePath[i] = '\0';
			break;
		} else if (i == 1023)
			tmpFilePath[i] = '\0';
	}

	char program[4096];
	if (snprintf(program, 4096, "tcc -O3 -o %s -x c -I /usr/local/include/cmixins/ -", tmpFilePath) >= 4095)
		errx(1, "Command text was too long: %s", program);
	progStdout = popen(program, "w");
	if (!progStdout)
		err(1, "Failed to create cc process");
	String_push(&source, '\0');
	fprintf(progStdout, "%s", source.list);
	String_free(source);
	status = pclose(progStdout);
	if (status != 0) {
		if (status == -1)
			err(1, "command %s failed; popen failure", program);
		errx(1, "command %s failed with exit code %u", program, status);
	}

	String binary = String_from_cstr(tmpFilePath);
	HashMap_String_String_set(&binaryCache, sourcePath, binary);
	return binary;
}

String run_binary(String binaryPath, Vector_String_slice args)
{
	char command[65536];
	size_t pos = snprintf(command, 65536, "%s ", String_to_cstr(binaryPath));
	if (pos >= 65535)
		errx(1, "Command text was too long: %s", command);
	for (size_t i = 0; i < args.length; ++i) {
		pos += snprintf(&command[pos], 65536 - pos, "\"%s\" ", String_to_cstr(args.list[i]));
		if (pos >= 65535)
			errx(1, "Command text was too long: %s", command);
	}
	FILE *cmdStdout = popen(command, "r");
	if (!cmdStdout)
		err(1, "Failed to open mixin %s", binaryPath);
	String result = String_new(1024);
	char buf[1024];
	while (fgets(buf, 1024, cmdStdout) != NULL)
		String_push_cstr(&result, buf);
	int status = pclose(cmdStdout);
	if (status != 0) {
		if (status == -1)
			err(1, "command %s failed; popen failure", command);
		errx(1, "command %s failed with exit code %u", binaryPath, status);
	}
	return result;
}


String run_func(Vector_String args, String origin)
{
	String func = args.list[0];
	if (String_equals_cstr(func, "@""setting")) {
		String key = args.list[1];
		String value = args.list[2];
		String_stripify(&key, '"');
		String_stripify(&value, '"');
		if (String_equals_cstr(key, "pass-limit")) {
			char *invalid = "";
			char *cstr = String_to_cstr(value);
			passLimit = strtol(cstr, &invalid, 10);
			if (*cstr == '\0' || *invalid != '\0')
				err(1, "Invalid integer literal %s for setting pass-limit", cstr);
		}
	} else if (String_equals_cstr(func, "@""mixin")) {
		String file = String_copy(args.list[1]);
		String_stripify(&file, '"');
		String binary = make_binary(file);
		Vector_String_slice argsR = Vector_String_get_slice(args, 2, args.length);
		String result = run_binary(binary, argsR);
		return result;
	} else if (String_equals_cstr(func, "@""mixinsys")) {
		String file = String_copy(args.list[1]);
		String_stripify(&file, '"');
		String prefix = String_from_cstr("/usr/local/include/cmixins/");
		String_insert_slice(&file, prefix, 0);
		String binary = make_binary(file);
		String_free(prefix);
		Vector_String_slice argsR = Vector_String_get_slice(args, 2, args.length);
		String result = run_binary(binary, argsR);
		return result;
	} else if (String_equals_cstr(func, "@""include")) {
		String file = String_copy(args.list[1]);
		String_stripify(&file, '"');
		String source = String_copy(entry(file, true));
		String_free(file);
		return source;
	} else if (String_equals_cstr(func, "@""includesys")) {
		String file = String_copy(args.list[1]);
		String_stripify(&file, '"');
		String prefix = String_from_cstr("/usr/local/include/cmixins/include/");
		String_insert_slice(&file, prefix, 0);
		String_free(prefix);
		String source = String_copy(entry(file, true));
		String_free(file);
		return source;
	} else if (String_equals_cstr(func, "@""embed")) {
		Vector_String realArgs = Vector_String_new(3);
		String funcToCall = String_from_cstr("@""mixinsys");
		String fileToCall = String_from_cstr("\"embed.cm\"");
		Vector_String_push(&realArgs, funcToCall);
		Vector_String_push(&realArgs, fileToCall);
		Vector_String_push(&realArgs, args.list[1]);
		origin = func;
		String ret = run_func(realArgs, origin);
		String_free(funcToCall);
		String_free(fileToCall);
		Vector_String_free(realArgs);
		return ret;
	} else if (String_equals_cstr(func, "@""length")) {
		Vector_String realArgs = Vector_String_new(3);
		String funcToCall = String_from_cstr("@""mixinsys");
		String fileToCall = String_from_cstr("\"length.cm\"");
		Vector_String_push(&realArgs, funcToCall);
		Vector_String_push(&realArgs, fileToCall);
		Vector_String_push(&realArgs, args.list[1]);
		origin = func;
		String ret = run_func(realArgs, origin);
		String_free(funcToCall);
		String_free(fileToCall);
		Vector_String_free(realArgs);
		return ret;
	}
	return func;
}

String expand_line(String line)
{
	ssize_t start = String_index_of(line, '@');
	if (start == -1)
		return String_copy(line);
	if (start == 0) {
		if (valid_func(line)) {
			hasMixins.list[hasMixins.length - 1] = true;
			String right;
			Vector_String funcCall = get_call(line, &right);
			String origin = (String) { .capacity = 1, .length = 0, .list = "\0" };
			String left = run_func(funcCall, origin);
			String rightex = expand_line(right);
			String_free(right);
			for (size_t i = 0; i < funcCall.length; ++i)
				String_free(funcCall.list[i]);
			Vector_String_free(funcCall);
			String_push_slice(&left, rightex);
			String_free(rightex);
			return left;
		} else {
			return String_copy(line);
		}
	}
	String left = String_remove_slice(&line, 0, start);
	String right = expand_line(line);
	String_push_slice(&left, right);
	String_free(right);
	return left;
}

String expand_file(String source)
{
	String result = String_new(source.capacity);
	String current = source;
	while (current.length > 0) {
		ssize_t nextLineIdx = String_index_of(current, '\n');
		if (nextLineIdx < 0)
			nextLineIdx = current.length - 1;
		String line = String_remove_slice(&current, 0, nextLineIdx + 1); // include the \n
		String expandedLine = expand_line(line);
		String_push_slice(&result, expandedLine);
		String_free(line);
		String_free(expandedLine);
	}
	String_free(current);

	return result;
}

String entry(String _path, bool isInclude)
{
	String path = String_copy(_path);
	Vector_int_push(&passCount, 0);
	String cwd;
	{
		char cwdCstr[4096];
		if (!getcwd(cwdCstr, 4096))
			err(1, "Failed to getcwd() with buffer of size 4096");
		cwd = String_from_cstr(cwdCstr);
	}
	if (!String_starts_with_cstr(path, "/")) {
		String_insert(&path, '/', 0);
		String_insert_slice(&path, cwd, 0);
	}
	if (isInclude && Vector_String_contains(alreadyIncluded, path)) {
		String_free(path);
		return String_new(1);
	}
	else if (isInclude)
		Vector_String_push(&alreadyIncluded, path);
	if (HashMap_String_String_has_key(sourceCache, path)) {
		String v = HashMap_String_String_get_value(sourceCache, path);
		String_free(path);
		return v;
	}
	String source = String_load_file(path);
	String sourceDir = String_copy_slice(path, 0, String_last_index_of(path, '/'));

	chdir(String_to_cstr(sourceDir));
	Vector_bool_push(&hasMixins, true);
	while (hasMixins.list[hasMixins.length - 1] && passCount.list[passCount.length - 1] < passLimit) {
		hasMixins.list[hasMixins.length - 1] = false;
		source = expand_file(source);
		passCount.list[passCount.length - 1] += 1;
	}

	Vector_int_pop(&passCount);
	Vector_bool_pop(&hasMixins);

	HashMap_String_String_set(&sourceCache, path, source);

	chdir(String_to_cstr(cwd));
	String_free(cwd);
	String_free(sourceDir);
	return source;
}

int main(int argc, char **argv)
{
	if (argc != 2)
		return 1;

	passCount = Vector_int_new(1);
	hasMixins = Vector_bool_new(1);
	sourceCache = HashMap_String_String_new(1);
	alreadyIncluded = Vector_String_new(1);
	binaryCache = HashMap_String_String_new(1);

	String path = String_from_cstr(argv[1]);
	String result = entry(path, false);
	String_free(path);
	//printf("%s", String_to_cstr(result));

	for (size_t i = 0; i < binaryCache.length; ++i) {
		// if file exists...
		if (access(String_to_cstr(binaryCache.list[i].value), F_OK) == 0) {
			remove(String_to_cstr(binaryCache.list[i].value));
		}
	}

	Vector_int_free(passCount);
	Vector_bool_free(hasMixins);
	for (size_t i = 0; i < sourceCache.length; ++i) {
		String_free(sourceCache.list[i].key);
		String_free(sourceCache.list[i].value);
	}
	HashMap_String_String_free(sourceCache);
	for (size_t i = 0; i < binaryCache.length; ++i) {
		String_free(binaryCache.list[i].key);
		String_free(binaryCache.list[i].value);
	}
	HashMap_String_String_free(binaryCache);
	Vector_String_free(alreadyIncluded);
}
